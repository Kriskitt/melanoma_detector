import streamlit as st
from PIL import Image
import requests
import json
import os

url="http://localhost:8000"

# Configuraci√≥n inicial de la p√°gina de Streamlit
st.set_page_config(
    page_title="Detector de Melanoma",
    page_icon='üñºÔ∏è',
    layout="centered",
    initial_sidebar_state="expanded",
)
# üì∏
# T√≠tulo y descripci√≥n de la aplicaci√≥n
st.title('Detector de Melanoma :material/add_a_photo: :material/health_metrics:')
st.markdown('''
    Esta interfaz utiliza un modelo avanzado de Deep Learning que permite analizar im√°genes de lesiones de piel estimando una probabilidad de que pueda ser melanoma.

    Su prop√≥sito es servir como un apoyo preventivo en la detecci√≥n temprana, ayud√°ndote a tomar decisiones informadas sobre tu salud.
''')
st.subheader("¬øC√≥mo funciona?")
st.markdown('''
    - PASO :one:: Sube una imagen clara de la zona que deseas evaluar.
    - PASO :two:: Nuestro modelo analizar√° la imagen.
    - PASO :three:: Recibir√°s un porcentaje de probabilidad junto con una orientaci√≥n sobre posibles pr√≥ximos pasos.
''')

st.markdown("---")

col1, col2 = st.columns(2)

with col1:
    # Crear la entrada para cargar una imagen
    st.markdown("#### :one: Suba una imagen para su an√°lisis :material/upload_2: :material/image_search:")
    new_input = st.file_uploader("Cargar imagen", type=['jpg', 'jpeg', 'png'])

    if new_input is not None:
        # Mostrar la imagen cargada por el usuario
        st.image(Image.open(new_input), caption="Imagen cargada ‚òùÔ∏è", width=250)
        img_bytes = new_input.getvalue()


with col2:
    # Bot√≥n para analizar la imagen
    st.markdown("#### :two: Presiona el Bot√≥n para an√°lisis :material/web_traffic:")
    st.markdown("")
    st.markdown("")
    st.markdown("")
    if st.button("Analizar imagen"):
        with st.spinner("Analizando la imagen, por favor espere..."):
    # Realizar solicitud a la API
            res=requests.post(url+"/predict",files={"img":img_bytes})

            if res.status_code==200:
                st.success("File processed succesfully! ‚úÖ")
                response = res.json()
                risk = response.get("fare")
                risk_format = "{:.2%}".format(risk)

        #if risk:
                st.markdown(f":three: __Probabilidad de Melanoma: {risk_format}__")

                if risk <= 0.20:
                    st.success("Monitoreo Recomendado: Recomendamos hacer seguimiento regular de su piel y en caso de dudas consultar a un Dermat√≥logo.")
                elif 0.21 <= risk <= 0.49:
                    st.warning(" Revisi√≥n Sugerida: Recomendamos hacer seguimiento regular de su piel y considerar una visita a un Dermat√≥logo")
                elif risk >=0.50:
                    st.error("Consulta Recomendada: Recomendamos una revisi√≥n m√©dica con Dermat√≥logo para mayor tranquilidad.")
                else:
                    st.error("No se pudo determinar el nivel de riesgo. Por favor, intente de nuevo.")



            else:
                st.error("Error en la solicitud a la API. Por favor, intente m√°s tarde.")

st.divider()
st.info("Recuerda que esta evaluaci√≥n es una herramienta de apoyo y en ning√∫n caso puede utilizarse como un diagn√≥stico m√©dico. Si tienes dudas, un dermat√≥logo üßë‚Äç‚öïÔ∏è:material/stethoscope: es la mejor fuente de informaci√≥n.")
